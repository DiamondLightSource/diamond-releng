<?xml version="1.0" encoding="UTF-8"?>
<project name="headless-corba-common" basedir=".">
	<description>
Tasks used to build CORBA jars for GDA.
	</description>

	<property name="corba-common-included" value="true" />

	<!-- compiling CORBA depends on the core CORBA in uk.ac.gda.api (unless we are compiling for uk.ac.gda.api itself) -->
	<condition property="include.core.in.compilation" value="true">
		<not><equals arg1="${plugin.name}" arg2="uk.ac.gda.api" /></not>
	</condition>

	<!-- Properties relating to CORBA -->

	<property name="javacVerbose" value="${gdaVerboseSetting}" />
	<property name="compiler.source.level" value="1.7" />
	<property name="compiler.target.level" value="1.7" />

	<!-- ======================================================================
	       CORBA Compilation
	     0 Delete ${corba.src.dir} src/corba/java, ${corba.compiled.dir} bin/corba
	     1 Compile ${corba.idl.dir} src/idl        to ${corba.src.dir} src/corba/java
	     2 Compile ${corba.src.dir} src/corba/java to ${corba.compiled.dir} bin/corba
	     3 Jar ${corba.compiled.dir} bin/corba     to jars/${corba.jar.name}
	     ====================================================================== -->

	<target name="corba-init" depends="corba-init.notok, corba-init.ok" />
	<target name="corba-init.notok" unless="corba.jar.name">
		<property name="skip.corba" value="true" />
	</target>

	<target name="corba-init.ok" if="corba.jar.name" unless="skip.corba">
		<property name="corba.idl.rel.dir" value="src/idl" description="Relative location of CORBA IDL files" />
		<property name="corba.idl.dir" location="${plugin.basedir}/${corba.idl.rel.dir}" description="Location of CORBA IDL files" />
		<property name="corba.src.dir" location="${plugin.basedir}/src/corba/java" description="Location of generated CORBA Java source files" />
		<condition property="corba.compiled.dir" value="${corba.compiled.dir.override}">
			<isset property="corba.compiled.dir.override" />
		</condition>
		<property name="corba.compiled.dir" location="${plugin.basedir}/bin/corba" description="Location of compiled CORBA classes" />
	</target>

	<target name="corba-init.core.include" if="include.core.in.compilation">
		<!-- compiling CORBA depends on the core CORBA in uk.ac.gda.api - this target is for that case -->
		<property name="core.corba.idl.dir" location="${workspace.git.loc}/gda-core.git/uk.ac.gda.api/src/idl" description="Location of gda core CORBA IDL files - e.g. device.idl" />
		<property name="core.corba.idl.dir.arg" value="-I${core.corba.idl.dir}" />
		<path id="corba.compile.classpath" description="class path used when compiling CORBA src java files other than in uk.ac.gda.api">
			<pathelement path="${workspace.git.loc}/gda-core.git/uk.ac.gda.api/jars/gda-corba.jar" />
		</path>
	</target>
	<target name="corba-init.core.exclude" unless="include.core.in.compilation">
		<!-- compiling CORBA normally depends on the core CORBA in uk.ac.gda.api - this target is for when we are compiling for uk.ac.gda.api itself -->
		<property name="core.corba.idl.dir.arg" value="" />
		<path id="corba.compile.classpath" description="class path used when compiling CORBA src java files other than in uk.ac.gda.api">
			<!-- Define an empty path -->
		</path>
	</target>

	<target name="corba-clean_impl" extensionOf="corba-clean" depends="corba-init">
		<delete dir="${corba.src.dir}" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
		<delete dir="${corba.compiled.dir}" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
		<echo-time message="corba-clean completed in ${ant.project.name}" />
	</target>

	<target name="corba-compile-idl" depends="corba-clean_impl, corba-init.core.include, corba-init.core.exclude" unless="skip.corba">
		<fileset dir="${plugin.basedir}" includes="${corba.idl.rel.dir}/*.idl" id="corba.idl.files.id" />
		<resourcecount property="corba.idl.files.count" refid="corba.idl.files.id" />
		<pathconvert property="corba.idl.files" refid="corba.idl.files.id" pathsep=" " />
		<pathconvert property="corba.idl.files.printable" refid="corba.idl.files.id" pathsep=", "><flattenmapper/></pathconvert>
		<echo>${corba.idl.files.count} IDL file(s) to compile in ${corba.idl.dir}: ${corba.idl.files.printable}</echo>
		<java classname="org.jacorb.idl.parser" failonerror="true">
			<classpath>
				<fileset dir="${workspace.git.loc}/diamond-jacorb.git/uk.ac.diamond.org.jacorb/jars/">
					<include name="idl.jar" />
					<include name="logkit-1.2.jar" />
				</fileset>
			</classpath>
			<!-- compiler options -->
			<arg value="-I${corba.idl.dir}"/>
			<arg line="${core.corba.idl.dir.arg}"/>
			<arg value="-d" />
			<arg value="${corba.src.dir}" />
			<!-- IDL files to compile -->
			<arg line="${corba.idl.files}" />
		</java>
		<echo file="${corba.src.dir}/README.txt">This directory contains code that was generated by compiling ${corba.idl.dir}.
You can delete it after the CORBA .jar has been made.
This directory should not be checked in to source control.</echo>
	</target>

	<target name="_corba-compile-classes.cmpl" depends="corba-compile-idl" unless="skip.corba">
		<delete dir="${corba.compiled.dir}" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
		<mkdir dir="${corba.compiled.dir}" />
		<javac srcdir="${corba.src.dir}" destdir="${corba.compiled.dir}" verbose="${javacVerbose}"
			source="${compiler.source.level}" target="${compiler.target.level}"
			includeAntRuntime="no"
			classpathref="corba.compile.classpath">
			<exclude name="**/README.txt"/>
			<!--  <compilerarg value="-Xlint:unchecked"/> -->
		</javac>
	</target>

	<target name="corba-compile-classes" depends="_corba-compile-classes.cmpl" unless="skip.corba">
			<echo file="${corba.compiled.dir}/README.txt">This directory contains code that was generated by compiling ${corba.src.dir}.
You can delete it after the CORBA .jar has been made.
This directory should not be checked in to source control.</echo>
	</target>

	<!-- to activate corba-make-jar for a plugin, set corba.jar.name in the plugin's build-plugin.xml -->
	<target name="corba-make-jar_impl" extensionOf="corba-make-jar" depends="_corba-make-jar" if="skip.corba">
		<echo>Skipping CORBA compilation for ${plugin.name} - $${corba.jar.name} not set in ${plugin.basedir}${file.separator}build-plugin.xml</echo>
	</target>
	<target name="_corba-make-jar" depends="corba-compile-classes" unless="skip.corba">
		<mkdir dir="jars" />
		<jar destfile="jars/${corba.jar.name}">
			<fileset dir="${corba.compiled.dir}" excludes="README.txt" />
		</jar>
		<echo>
---> CORBA ${plugin.name}${file.separator}jars${file.separator}${corba.jar.name} generated - remember to check it into version control &lt;---
		</echo>
	</target>

	<!-- ======================================================================
	       CORBA Validation
	     Check that a CORBA jar matches the source (by rebuilding and comparing)
	     ====================================================================== -->

	<target name="corba-validate-jar_impl" extensionOf="corba-validate-jar" depends="_corba-validate-jar" if="corba.jar.name" unless="corba-validate.platform.ok">
		<echo>Skipping corba jar validation for ${plugin.name} - the check can only be performed on Linux</echo>
	</target>
	<target name="_corba-validate-jar" depends="_corba-validate-jar.check-if-runnable, _corba-validate-jar.setup,
		_corba-compile-classes.cmpl, _corba-validate-jar.compare-versions, _corba-validate-jar.ok-msg, _corba-validate-jar.error-msg">
	</target>

	<target name="_corba-validate-jar.check-if-runnable">
		<condition property="corba-validate.platform.ok">
			<os family="unix" />
		</condition>
		<condition property="skip.corba">
			<or>
				<not><isset property="corba.jar.name" /></not>
				<not><isset property="corba-validate.platform.ok" /></not>
			</or>
		</condition>
	</target>

	<target name="_corba-validate-jar.setup" unless="skip.corba">
		<!-- check that there is an existing CORBA jar -->
		<condition property="validate-jar-error" value="Missing CORBA jar &quot;${plugin.basedir}${file.separator}jars${file.separator}${corba.jar.name}&quot;">
			<not><available file="jars/${corba.jar.name}" type="file" /></not>
		</condition>
		<fail if="validate-jar-error" message="${validate-jar-error}" />
		<!-- create a temporary directory -->
		<property name="validate-jar.tmpdir" value="${java.io.tmpdir}/gda-validate.jar-${plugin.name}/" />
		<delete dir="${validate-jar.tmpdir}" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
		<!-- unjar the existing CORBA jar (skipping META-INF) -->
		<unjar src="jars/${corba.jar.name}" dest="${validate-jar.tmpdir}/classes-matching-existing-jar">
			<patternset>
				<exclude name="**/META-INF/"/>
			</patternset>
		</unjar>
		<!-- set properties required to re-compile the idl and the generated java, into the temporary directory -->
		<fail if="corba.src.dir" message="Something has gone wrong - $${corba.src.dir} is already set (to ${corba.src.dir})" />
		<fail if="corba.compiled.dir" message="Something has gone wrong - $${corba.compiled.dir} is already set (to ${corba.compiled.dir})" />
		<property name="corba.src.dir" location="${validate-jar.tmpdir}/src/corba/java" />
		<property name="corba.compiled.dir" location="${validate-jar.tmpdir}/classes-matching-source" />
	</target>

	<target name="_corba-validate-jar.compare-versions" unless="skip.corba">
		<exec executable="diff" osfamily="unix" outputproperty="validate-jar.outputproperty" resultproperty="validate-jar.resultproperty" inputstring="" dir="${validate-jar.tmpdir}">
			<arg value="-r" />
			<arg value="classes-matching-existing-jar/" />
			<arg value="classes-matching-source/" />
		</exec>
		<condition property="corba.jar.mismatch">
			<and>
				<os family="unix" />
				<not><equals arg1="${validate-jar.resultproperty}" arg2="0" /></not>
			</and>
		</condition>
		<condition property="corba.jar.match">  <!-- yes we do need this as well -->
			<not><isset property="corba.jar.mismatch" /></not>
		</condition>
	</target>

	<target name="_corba-validate-jar.ok-msg" if="corba.jar.match">
		<echo>VALID: ${plugin.name}, &quot;jars/${corba.jar.name}&quot; matches the CORBA source in &quot;${corba.idl.dir}&quot;</echo>
		<delete dir="${validate-jar.tmpdir}" includeemptydirs="true" quiet="true" verbose="${gdaVerboseSetting}" />
	</target>

	<target name="_corba-validate-jar.error-msg" if="corba.jar.mismatch">
		<echo>ERROR: ${plugin.name} : &quot;jars/${corba.jar.name}&quot; does not match the CORBA source in &quot;${corba.idl.dir}&quot;</echo>
		<echo>${validate-jar.outputproperty}</echo>
		<fail message="CORBA jar does not match the CORBA source" />
	</target>

</project>
